name: Build and Release EXE

on:
  push:
    paths:
      - 'wifi_pro.ps1'
      - 'version.txt'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version and build number
        id: version
        shell: pwsh
        run: |
          $version = Get-Content version.txt -Raw
          $date = Get-Date -Format "yyMMdd"
          $fullver = "$version.$date"
          echo "version=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "build=$date" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "fullver=$fullver" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "tag=$fullver" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install PS2EXE from PowerShell Gallery
        shell: pwsh
        run: |
          Install-Module -Name ps2exe -Force -Scope CurrentUser

      - name: Download ImageMagick portable
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-32-portable-Q16-x64.zip" -OutFile "imagemagick.zip"
          Expand-Archive imagemagick.zip -DestinationPath imagemagick

      - name: Convert PNG to ICO
        shell: pwsh
        run: |
          ./imagemagick/magick.exe convert icon.png -define icon:auto-resize=256,128,64,48,32,16 wifi.ico

      - name: Build EXE
        shell: pwsh
        run: |
          Import-Module ps2exe
          Invoke-ps2exe ./wifi_pro.ps1 ./wifi_pro.exe -noConsole -icon ./wifi.ico

      - name: Create SHA256 for EXE
        shell: pwsh
        run: |
          Get-FileHash wifi_pro.exe -Algorithm SHA256 | ForEach-Object { "$($_.Hash) *wifi_pro.exe" } | Set-Content wifi_pro.exe.sha256

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.fullver }}
          name: "WiFi Exporter ${{ env.fullver }}"
          files: |
            wifi_pro.exe
            wifi_pro.exe.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old releases (if version.txt changed)
        if: contains(github.event.head_commit.message, 'version')
        shell: pwsh
        run: |
          $releases = gh release list --limit 100 --json tagName,createdAt | ConvertFrom-Json
          $mainver = "${{ env.version }}"
          $toDelete = $releases | Where-Object { $_.tagName -like "$mainver.*" } | Sort-Object createdAt -Descending | Select-Object -Skip 1
          foreach ($rel in $toDelete) {
            gh release delete $rel.tagName -y
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Keep only 5 last builds for current version
        if: "!contains(github.event.head_commit.message, 'version')"
        shell: pwsh
        run: |
          $releases = gh release list --limit 100 --json tagName,createdAt | ConvertFrom-Json
          $mainver = "${{ env.version }}"
          $toDelete = $releases | Where-Object { $_.tagName -like "$mainver.*" } | Sort-Object createdAt -Descending | Select-Object -Skip 5
          foreach ($rel in $toDelete) {
            gh release delete $rel.tagName -y
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
